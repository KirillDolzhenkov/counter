{"version":3,"sources":["components/Settings/Settings.module.css","components/Counter/Display/Display.module.css","components/Counter/Counter.module.css","components/Counter/ActionBtn/ActionBtn.module.css","components/Settings/SetBtn/SetBtn.module.css","App.module.css","components/Counter/Display/Display.tsx","components/Counter/ActionBtn/ActionBtn.tsx","components/Counter/Counter.tsx","components/Settings/SetBtn/SetBtn.tsx","components/Settings/Settings.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["module","exports","Display","props","classNamePropsValue","count","maxValue","style","baseValue","redValue","inputValue","editMode","classNameValue","information","value","className","ActionBtn","styleBtnValue","disableActionBtn","enableActionBtn","disabled","onClick","actionFn","title","Counter","CounterBody","BtnArea","addValue","resetValue","startValue","SetBtn","error","styles","disable","testFn","Settings","inputClass","SetInput","SettingsBody","displayArea","descriptionArea","SettingsArea","type","onChange","e","addMaxValue","parseInt","currentTarget","changeEditMode","addStartValue","SBtnArea","App","useState","setMaxValue","setStartValue","setCount","setEditMode","setError","app","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ba3f1495.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"SettingsBody\":\"Settings_SettingsBody__19Ijx\",\"displayArea\":\"Settings_displayArea__3m0Z6\",\"SettingsArea\":\"Settings_SettingsArea__1vkBh\",\"descriptionArea\":\"Settings_descriptionArea__UZojm\",\"SBtnArea\":\"Settings_SBtnArea__3_qvh\",\"SetInput\":\"Settings_SetInput__2TX9Q\",\"error\":\"Settings_error__19JTb\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"baseValue\":\"Display_baseValue__qrCBt\",\"redValue\":\"Display_redValue__1UvP6\",\"information\":\"Display_information__eDdm6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"CounterBody\":\"Counter_CounterBody__2Ok5h\",\"BtnArea\":\"Counter_BtnArea__3Tg7J\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"enableActionBtn\":\"ActionBtn_enableActionBtn__3cju0\",\"disableActionBtn\":\"ActionBtn_disableActionBtn__3By3D\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"SetBtn\":\"SetBtn_SetBtn__cabLy\",\"disable\":\"SetBtn_disable__1QykG\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"App_app__3QxsX\"};","import React from \"react\";\r\n\r\nimport style from './Display.module.css'\r\n\r\n//types:\r\ntype DisplayPropsType = {\r\n    count: number\r\n    maxValue: number\r\n    editMode: boolean\r\n}\r\n\r\n//functional component:\r\nconst Display: React.FC<DisplayPropsType> = (props) => {\r\n\r\n    const classNamePropsValue = props.count === props.maxValue ? `${style.baseValue} ${style.redValue}` : `${style.baseValue}`;\r\n    const inputValue = props.editMode ? `please enter the values and press \"Set\" btn` : props.count;\r\n    const classNameValue = props.editMode ? `${style.baseValue} ${style.information}` : classNamePropsValue;\r\n\r\n    return (\r\n        <div>\r\n            <input\r\n                value={inputValue}\r\n                className={classNameValue}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport {\r\n    Display\r\n}","import React from \"react\";\r\n\r\nimport style from \"./ActionBtn.module.css\";\r\n\r\n//types:\r\ntype ActionBtnPropsType = {\r\n    actionFn: () => void\r\n    count: number\r\n    value: number\r\n    editMode: boolean\r\n    title: string\r\n}\r\n\r\n\r\n//functional component:\r\nconst ActionBtn: React.FC<ActionBtnPropsType> = (props) => {\r\n\r\n    const onClickHandler = () => {\r\n        props.actionFn();\r\n    }\r\n\r\n    const styleBtnValue = props.count === props.value || props.editMode\r\n        ? style.disableActionBtn\r\n        : style.enableActionBtn\r\n\r\n    return (\r\n        <div>\r\n            <button\r\n                className={styleBtnValue}\r\n                disabled={props.count === props.value || props.editMode}\r\n                onClick={onClickHandler}\r\n            >{props.title}\r\n            </button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport {\r\n    ActionBtn\r\n}","import React from \"react\";\r\n\r\nimport style from './Counter.module.css'\r\nimport {Display} from \"./Display/Display\";\r\nimport {ActionBtn} from \"./ActionBtn/ActionBtn\";\r\n\r\n//types:\r\ntype CounterPropsType = {\r\n    addValue: () => void\r\n    resetValue: () => void\r\n    count: number\r\n    maxValue: number\r\n    startValue: number\r\n    editMode: boolean\r\n}\r\n\r\n//functional component:\r\nconst Counter: React.FC<CounterPropsType> = (props) => {\r\n\r\n    const addValue = () => {\r\n        props.addValue();\r\n    }\r\n\r\n    const resetValue = () => {\r\n        props.resetValue();\r\n    }\r\n\r\n    return (\r\n        <div className={style.CounterBody}>\r\n            <div className={style.Display}>\r\n\r\n                <Display\r\n                    maxValue={props.maxValue}\r\n                    count={props.count}\r\n                    editMode={props.editMode}\r\n                />\r\n\r\n            </div>\r\n            <div className={style.BtnArea}>\r\n\r\n                <ActionBtn\r\n                    title={\"Inc\"}\r\n                    actionFn={addValue}\r\n                    count={props.count}\r\n                    value={props.maxValue}\r\n                    editMode={props.editMode}\r\n                />\r\n\r\n                <ActionBtn\r\n                    title={\"Reset\"}\r\n                    actionFn={resetValue}\r\n                    count={props.count}\r\n                    value={props.startValue}\r\n                    editMode={props.editMode}\r\n                />\r\n\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport {\r\n    Counter\r\n}","import React from \"react\";\r\nimport styles from \"./SetBtn.module.css\"\r\n\r\n//types:\r\ntype SetBtnPropsType = {\r\n    testFn: () => void\r\n    error: boolean\r\n\r\n\r\n    /*addStartValue: (value: number) => void\r\n    addMaxValue: (value: number) => void\r\n    startValue: number\r\n    maxValue: number*/\r\n    /*changeEditMode: (value: boolean) => void*/\r\n}\r\n\r\n//functional component:\r\nconst SetBtn: React.FC<SetBtnPropsType> = (props) => {\r\n\r\n    const onClickHandler = () => {\r\n        props.testFn();\r\n\r\n        /*   props.addStartValue(props.startValue);\r\n        props.addMaxValue(props.maxValue);\r\n        props.changeEditMode(false);*/\r\n    }\r\n\r\n    const styleBtnValue = props.error ? styles.disable : styles.SetBtn\r\n\r\n    return (\r\n        <div>\r\n            <button\r\n                className={styleBtnValue}\r\n                disabled={props.error}\r\n                onClick={onClickHandler}\r\n            >Set</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport {\r\n    SetBtn\r\n}","import React, {ChangeEvent} from \"react\";\r\n\r\nimport style from \"./Settings.module.css\"\r\nimport {SetBtn} from \"./SetBtn/SetBtn\";\r\n\r\n//types:\r\ntype SettingsPropsType = {\r\n    addStartValue: (value: number) => void\r\n    addMaxValue: (value: number) => void\r\n    startValue: number\r\n    maxValue: number\r\n    changeEditMode: (value: boolean) => void\r\n    error: boolean\r\n}\r\n\r\n//functional component:\r\nconst Settings: React.FC<SettingsPropsType> = (props) => {\r\n\r\n    //callBacks:\r\n    const onStartValueChange = (e: ChangeEvent<HTMLInputElement>)=>{\r\n        props.addStartValue(parseInt(e.currentTarget.value));\r\n        props.changeEditMode(true);\r\n    }\r\n    const onMaxValueChange = (e: ChangeEvent<HTMLInputElement>)=>{\r\n        props.addMaxValue(parseInt(e.currentTarget.value));\r\n        props.changeEditMode(true);\r\n    }\r\n    const setValues = () => {\r\n        props.addStartValue(props.startValue);\r\n        props.addMaxValue(props.maxValue); //need to fix () !!!\r\n        props.changeEditMode(false);\r\n    }\r\n\r\n    const inputClass = props.error ?  `${style.SetInput} ${style.error}` : `${style.SetInput}`\r\n\r\n    return (\r\n        <div className={style.SettingsBody}>\r\n            <div className={style.displayArea}>\r\n                <div className={style.descriptionArea}>\r\n                    <div>max value:</div>\r\n                    <div>start value:</div>\r\n                </div>\r\n                <div className={style.SettingsArea}>\r\n                    <input\r\n                        type={'number'}\r\n                        className={inputClass}\r\n                        value={props.maxValue}\r\n                        onChange={onMaxValueChange}\r\n                    />\r\n                    <input\r\n                        type={'number'}\r\n                        className={inputClass}\r\n                        value={props.startValue}\r\n                        onChange={onStartValueChange}\r\n                    />\r\n                </div>\r\n            </div>\r\n            <div className={style.SBtnArea}>\r\n                <SetBtn\r\n                    testFn={setValues}\r\n\r\n                    /*addStartValue={props.addStartValue}\r\n                    addMaxValue={props.addMaxValue}\r\n                    startValue={props.startValue}\r\n                    maxValue={props.maxValue}\r\n                    changeEditMode={props.changeEditMode}*/\r\n\r\n                    error={props.error}\r\n                />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport {\r\n    Settings\r\n}","import React, {useReducer, useState} from 'react';\nimport style from './App.module.css';\nimport {Counter} from \"./components/Counter/Counter\";\nimport {Settings} from \"./components/Settings/Settings\";\nimport {addValueAC} from \"./redux/appReducer\";\n\n\n//functional component:\nconst App: React.FC = () => {\n\n    //settings:\n    const [maxValue, setMaxValue] = useState<number>(1);\n    const [startValue, setStartValue] = useState<number>(0);\n\n    //display:\n    const [count, setCount] = useState<number>(0);\n\n    //editMode:\n    const [editMode, setEditMode] = useState<boolean>(false);\n\n    //error:\n    const [error, setError] = useState<boolean>(false);\n\n\n    //callBacks:\n    const addValue = () => {\n        /*setCount(count + 1);*/\n        addValueAC()\n    }\n\n    const resetValue = () => {\n        setCount(startValue);\n    }\n\n    const addMaxValue = (value: number) => {\n        if (value <= startValue || value < 0) {\n            setError(true);\n        } else {\n            setError(false);\n        }\n        setMaxValue(value);\n    }\n\n    const addStartValue = (value: number) => {\n        if (value >= maxValue || value < 0) {\n            setError(true)\n        } else {\n            setError(false);\n        }\n        setStartValue(value);\n        setCount(startValue);\n    }\n\n    const changeEditMode = (value: boolean) => {\n        setEditMode(value);\n    }\n\n\n    return (\n        <div className={style.app}>\n            <Settings\n                addStartValue={addStartValue}\n                addMaxValue={addMaxValue}\n                startValue={startValue}\n                maxValue={maxValue}\n                changeEditMode={changeEditMode}\n                error={error}\n            />\n\n            <Counter\n                count={count}\n                addValue={addValue}\n                resetValue={resetValue}\n                maxValue={maxValue}\n                startValue={startValue}\n                editMode={editMode}\n            />\n        </div>\n    );\n}\n\nexport {\n    App\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {App} from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}