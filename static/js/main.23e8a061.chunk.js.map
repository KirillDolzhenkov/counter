{"version":3,"sources":["components/Settings/Settings.module.css","components/Counter/Display/Display.module.css","components/Counter/Counter.module.css","components/Counter/IncBtn/IncBtn.module.css","components/Counter/ResetBtn/Reset.module.css","components/Settings/SetBtn/SetBtn.module.css","App.module.css","components/Counter/Display/Display.tsx","components/Counter/IncBtn/IncBtn.tsx","components/Counter/ResetBtn/ResetBtn.tsx","components/Counter/Counter.tsx","components/Settings/SetBtn/SetBtn.tsx","components/Settings/Settings.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["module","exports","Display","props","classNamePropsValue","count","maxValue","style","baseValue","redValue","inputValue","editMode","classNameValue","information","value","className","IncBtn","styleBtnValue","disable","disabled","onClick","addValue","ResetBtn","startValue","styles","resetValue","Counter","CounterBody","BtnArea","SetBtn","error","addStartValue","changeEditMode","Settings","inputClass","SetInput","SettingsBody","SettingsArea","type","onChange","e","addMaxValue","parseInt","currentTarget","SBtnArea","App","useState","setMaxValue","setStartValue","setCount","setEditMode","setError","app","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.23e8a061.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"SettingsBody\":\"Settings_SettingsBody__19Ijx\",\"SettingsArea\":\"Settings_SettingsArea__1vkBh\",\"SBtnArea\":\"Settings_SBtnArea__3_qvh\",\"SetInput\":\"Settings_SetInput__2TX9Q\",\"error\":\"Settings_error__19JTb\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"baseValue\":\"Display_baseValue__qrCBt\",\"redValue\":\"Display_redValue__1UvP6\",\"information\":\"Display_information__eDdm6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"CounterBody\":\"Counter_CounterBody__2Ok5h\",\"Display\":\"Counter_Display__2FYk4\",\"BtnArea\":\"Counter_BtnArea__3Tg7J\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"IncBtn\":\"IncBtn_IncBtn__35U13\",\"disable\":\"IncBtn_disable__MkiID\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ResetBtn\":\"Reset_ResetBtn__3MHlv\",\"disable\":\"Reset_disable__jrFMj\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"SetBtn\":\"SetBtn_SetBtn__cabLy\",\"disable\":\"SetBtn_disable__1QykG\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"App_app__3QxsX\"};","import React from \"react\";\r\nimport style from './Display.module.css'\r\n\r\n//types:\r\ntype DisplayPropsType = {\r\n    count: number\r\n    maxValue: number\r\n    editMode: boolean\r\n}\r\n\r\n//functional component:\r\nconst Display: React.FC<DisplayPropsType> = (props) => {\r\n\r\n    const classNamePropsValue = props.count === props.maxValue ? `${style.baseValue} ${style.redValue}` : `${style.baseValue}`;\r\n    const inputValue = props.editMode? `please enter values and press \"Set\" button` : props.count;\r\n    const classNameValue = props.editMode? `${style.baseValue} ${style.information}` : classNamePropsValue;\r\n\r\n    return(\r\n        <div>\r\n            <h2>\r\n                <input\r\n                    value={inputValue}\r\n                    className={classNameValue}\r\n                />\r\n            </h2>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport {\r\n    Display\r\n}","import React from \"react\";\r\nimport style from './IncBtn.module.css';\r\n/*import styles from \"../ResetBtn/Reset.module.css\";*/\r\n\r\n//types:\r\ntype IncBtnPropsType = {\r\n    addValue: () => void\r\n    count: number\r\n    maxValue: number\r\n    editMode: boolean\r\n}\r\n\r\n//functional component:\r\nconst IncBtn: React.FC<IncBtnPropsType> = (props) => {\r\n    const onClickHandler = () =>{props.addValue()}\r\n    /*const styleBtnValue = props.onDisplay === 0 ? 'IncBtn' : 'DisabledIncBtnBtn'*/\r\n    const styleBtnValue = props.count === props.maxValue || props.editMode ? style.disable : style.IncBtn\r\n    return (\r\n        <>\r\n            <span>\r\n                <button\r\n                    className={styleBtnValue}\r\n                    disabled={props.count === props.maxValue || props.editMode}\r\n                    onClick={onClickHandler}\r\n                >Inc</button>\r\n            </span>\r\n        </>\r\n    )\r\n}\r\n\r\nexport {\r\n    IncBtn\r\n}","import React from \"react\";\r\nimport styles from './Reset.module.css';\r\n\r\n//types:\r\ntype ResetBtnPropsType = {\r\n    resetValue: () => void\r\n    count: number\r\n    startValue: number\r\n    editMode: boolean\r\n}\r\n\r\n//functional component:\r\nconst ResetBtn: React.FC<ResetBtnPropsType> = (props) => {\r\n    const onClickHandler = ()=>{props.resetValue()}\r\n    const styleBtnValue = props.count === props.startValue || props.editMode? styles.disable : styles.ResetBtn\r\n    return (\r\n        <>\r\n            <span>\r\n                <button\r\n                    className={styleBtnValue}\r\n                    disabled={props.count === props.startValue || props.editMode}\r\n                    onClick={onClickHandler}\r\n                >Reset</button>\r\n            </span>\r\n        </>\r\n    )\r\n}\r\n\r\nexport {\r\n    ResetBtn\r\n}","import React from \"react\";\r\nimport style from './Counter.module.css'\r\nimport {Display} from \"./Display/Display\";\r\nimport {IncBtn} from \"./IncBtn/IncBtn\";\r\nimport {ResetBtn} from \"./ResetBtn/ResetBtn\";\r\n\r\n//types:\r\ntype CounterPropsType = {\r\n    addValue: () => void\r\n    resetValue: () => void\r\n    count: number\r\n    maxValue: number\r\n    startValue: number\r\n    editMode: boolean\r\n}\r\n\r\n//functional component:\r\nexport const Counter: React.FC<CounterPropsType> = (props) => {\r\n    return (\r\n        <div className={style.CounterBody}>\r\n            <div className={style.Display}>\r\n                <Display\r\n                    maxValue={props.maxValue}\r\n                    count={props.count}\r\n                    editMode={props.editMode}\r\n                />\r\n            </div>\r\n            <div className={style.BtnArea}>\r\n                <IncBtn\r\n                    addValue={props.addValue}\r\n                    count={props.count}\r\n                    maxValue={props.maxValue}\r\n                    editMode={props.editMode}\r\n                />\r\n                <ResetBtn\r\n                    resetValue={props.resetValue}\r\n                    count={props.count}\r\n                    startValue={props.startValue}\r\n                    editMode={props.editMode}\r\n                />\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport styles from \"./SetBtn.module.css\"\r\n\r\n//types:\r\ntype SetBtnPropsType = {\r\n    addStartValue: (value: number) => void\r\n    addMaxValue: (value: number) => void\r\n    startValue: number\r\n    maxValue: number\r\n    changeEditMode: (value: boolean) => void\r\n    /*addLocalStorageValues: (startValue: number, maxValue: number) => void*/\r\n    error: boolean\r\n}\r\n\r\n//functional component:\r\nconst SetBtn: React.FC<SetBtnPropsType> = (props) => {\r\n    const onclickHandler = () => {\r\n        props.addStartValue(props.startValue);\r\n        /*props.addLocalStorageValues(props.startValue, props.maxValue);*/ // <-- addLocalStorageValues\r\n        props.changeEditMode(false);\r\n\r\n    }\r\n    const styleBtnValue = props.error ? styles.disable : styles.SetBtn\r\n    return (\r\n        <div>\r\n            <button\r\n                className={styleBtnValue}\r\n                disabled={props.error}\r\n                onClick={onclickHandler}\r\n            >Set</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport {\r\n    SetBtn\r\n}","import React, {ChangeEvent, useEffect, useState} from \"react\";\r\nimport style from \"./Settings.module.css\"\r\nimport {SetBtn} from \"./SetBtn/SetBtn\";\r\n\r\n//types:\r\ntype SettingsPropsType = {\r\n    addStartValue: (value: number) => void\r\n    addMaxValue: (value: number) => void\r\n    startValue: number\r\n    maxValue: number\r\n    changeEditMode: (value: boolean) => void\r\n    error: boolean\r\n}\r\n\r\n//functional component:\r\nconst Settings: React.FC<SettingsPropsType> = (props) => {\r\n\r\n    //localSettings:\r\n    /*const [localMaxValue, setLocalMaxValue] = useState<number>(props.maxValue);\r\n    const [localStartValue, setLocalStartValue] = useState<number>(props.startValue);*/\r\n\r\n    //callBacks:\r\n    const startValueHandler = (e: ChangeEvent<HTMLInputElement>)=>{\r\n        props.addStartValue(parseInt(e.currentTarget.value));\r\n        props.changeEditMode(true);\r\n    }\r\n\r\n    const maxValueHandler = (e: ChangeEvent<HTMLInputElement>)=>{\r\n        props.addMaxValue(parseInt(e.currentTarget.value));\r\n        props.changeEditMode(true);\r\n    }\r\n\r\n    /*const addLocalStorageValues = (startValue: number, maxValue: number) => {\r\n        setLocalStartValue(startValue);\r\n        setLocalMaxValue(maxValue);\r\n    }*/\r\n\r\n    //localStorage:\r\n\r\n    /*useEffect(() => {\r\n        setStorageValues();\r\n    },[localStartValue]);\r\n\r\n    const setStorageValues = () => {\r\n        localStorage.setItem(`${style.counterMaxValue}`, JSON.stringify(localMaxValue));\r\n        localStorage.setItem(`${style.counterStartValue}`, JSON.stringify(localStartValue));\r\n    }*/\r\n\r\n    /*let inputClass = props.error ? 'errorInput' : 'SetInput';*/\r\n    let inputClass = props.error ?  `${style.SetInput} ${style.error}` : `${style.SetInput}`;\r\n\r\n\r\n\r\n    return (\r\n        <div className={style.SettingsBody}>\r\n            <div className={style.SettingsArea}>\r\n                <h2>\r\n                    <span>max value: </span>\r\n                    <span>\r\n                        <input\r\n                            type={'number'}\r\n                            className={inputClass}\r\n                            value={props.maxValue}\r\n                            onChange={maxValueHandler}\r\n                        />\r\n                    </span>\r\n                </h2>\r\n                <h2>\r\n                    <span>start value: </span>\r\n                    <span><input\r\n                        type={'number'}\r\n                        className={inputClass}\r\n                        value={props.startValue}\r\n                        onChange={startValueHandler}\r\n                    /></span>\r\n                </h2>\r\n            </div>\r\n            <div className={style.SBtnArea}>\r\n                <SetBtn\r\n                    addStartValue={props.addStartValue}\r\n                    addMaxValue={props.addMaxValue}\r\n                    startValue={props.startValue}\r\n                    maxValue={props.maxValue}\r\n                    changeEditMode={props.changeEditMode}\r\n                   /* addLocalStorageValues={addLocalStorageValues}*/\r\n                    error={props.error}\r\n                />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport {\r\n    Settings\r\n}","import React, {useState} from 'react';\nimport style from './App.module.css';\nimport {Counter} from \"./components/Counter/Counter\";\nimport {Settings} from \"./components/Settings/Settings\";\n\n//functional component:\nconst App: React.FC = () => {\n\n    //settings:\n    const [maxValue, setMaxValue] = useState<number>(1);\n    const [startValue, setStartValue] = useState<number>(0);\n\n    //display:\n    const [count, setCount] = useState<number>(0);\n\n    //editMode:\n    const [editMode, setEditMode] = useState<boolean>(false);\n\n    //error:\n    const [error, setError] = useState<boolean>(false);\n\n\n    //callBacks:\n    const addValue = () => {\n        setCount(count + 1);\n    }\n    const resetValue = () => {\n        setCount(startValue);\n    }\n    const addMaxValue = (value: number) => {\n        if (value <= startValue || value < 0) {\n            setError(true);\n        } else {\n            setError(false);\n        }\n        setMaxValue(value);\n\n    }\n    const addStartValue = (value: number) => {\n        if (value >= maxValue || value < 0) {\n            setError(true)\n        } else {\n            setError(false);\n        }\n        setStartValue(value);\n        setCount(startValue);\n    }\n    const changeEditMode = (value: boolean) => {\n        setEditMode(value);\n    }\n\n\n    return (\n        <div className={style.app}>\n            <Settings\n                addStartValue={addStartValue}\n                addMaxValue={addMaxValue}\n                startValue={startValue}\n                maxValue={maxValue}\n                changeEditMode={changeEditMode}\n                error={error}\n            />\n\n            <Counter\n                count={count}\n                addValue={addValue}\n                resetValue={resetValue}\n                maxValue={maxValue}\n                startValue={startValue}\n                editMode={editMode}\n            />\n        </div>\n    );\n}\n\nexport {\n    App\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {App} from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}