{"version":3,"sources":["components/Settings/Settings.module.css","components/Counter/Display/Display.module.css","components/Counter/Counter.module.css","components/Counter/ActionBtn.module.css","components/Settings/SetBtn/SetBtn.module.css","App.module.css","components/Counter/Display/Display.tsx","components/Counter/ActionBtn.tsx","components/Counter/Counter.tsx","components/Settings/SetBtn/SetBtn.tsx","components/Settings/Settings.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["module","exports","Display","props","classNamePropsValue","count","maxValue","style","baseValue","redValue","inputValue","editMode","classNameValue","information","value","className","ActionBtn","styleBtnValue","styles","disableActionBtn","disabled","onClick","actionFn","Counter","CounterBody","BtnArea","addValue","resetValue","startValue","SetBtn","error","disable","addStartValue","changeEditMode","Settings","inputClass","SetInput","SettingsBody","displayArea","descriptionArea","SettingsArea","type","onChange","e","addMaxValue","parseInt","currentTarget","SBtnArea","App","useState","setMaxValue","setStartValue","setCount","setEditMode","setError","app","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f58b1abf.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"SettingsBody\":\"Settings_SettingsBody__19Ijx\",\"displayArea\":\"Settings_displayArea__3m0Z6\",\"SettingsArea\":\"Settings_SettingsArea__1vkBh\",\"descriptionArea\":\"Settings_descriptionArea__UZojm\",\"SBtnArea\":\"Settings_SBtnArea__3_qvh\",\"SetInput\":\"Settings_SetInput__2TX9Q\",\"error\":\"Settings_error__19JTb\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"baseValue\":\"Display_baseValue__qrCBt\",\"redValue\":\"Display_redValue__1UvP6\",\"information\":\"Display_information__eDdm6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"CounterBody\":\"Counter_CounterBody__2Ok5h\",\"Display\":\"Counter_Display__2FYk4\",\"BtnArea\":\"Counter_BtnArea__3Tg7J\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ActionBtn\":\"ActionBtn_ActionBtn__2wB5E\",\"disableActionBtn\":\"ActionBtn_disableActionBtn__vQ80l\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"SetBtn\":\"SetBtn_SetBtn__cabLy\",\"disable\":\"SetBtn_disable__1QykG\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"App_app__3QxsX\"};","import React from \"react\";\r\n\r\nimport style from './Display.module.css'\r\n\r\n//types:\r\ntype DisplayPropsType = {\r\n    count: number\r\n    maxValue: number\r\n    editMode: boolean\r\n}\r\n\r\n//functional component:\r\nconst Display: React.FC<DisplayPropsType> = (props) => {\r\n\r\n    const classNamePropsValue = props.count === props.maxValue ? `${style.baseValue} ${style.redValue}` : `${style.baseValue}`;\r\n    const inputValue = props.editMode ? `please enter the values and press \"Set\" btn` : props.count;\r\n    const classNameValue = props.editMode ? `${style.baseValue} ${style.information}` : classNamePropsValue;\r\n\r\n    return (\r\n        <div>\r\n            <input\r\n                value={inputValue}\r\n                className={classNameValue}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport {\r\n    Display\r\n}","import React from \"react\";\r\n\r\nimport styles from './ActionBtn.module.css';\r\n\r\n//types:\r\ntype ActionBtnPropsType = {\r\n    actionFn: () => void\r\n    count: number\r\n    value: number\r\n    editMode: boolean\r\n}\r\n\r\n//functional component:\r\nconst ActionBtn: React.FC<ActionBtnPropsType> = (props) => {\r\n\r\n    const onClickHandler = () => {\r\n        props.actionFn();\r\n    }\r\n\r\n    const styleBtnValue = props.count === props.value || props.editMode ? styles.disableActionBtn : styles.ActionBtn\r\n\r\n    return (\r\n        <div>\r\n            <button\r\n                className={styleBtnValue}\r\n                disabled={props.count === props.value || props.editMode}\r\n                onClick={onClickHandler}\r\n            >Reset\r\n            </button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport {\r\n    ActionBtn\r\n}","import React from \"react\";\r\n\r\nimport style from './Counter.module.css'\r\nimport {Display} from \"./Display/Display\";\r\nimport {IncBtn} from \"./IncBtn/IncBtn\";\r\nimport {ResetBtn} from \"./ResetBtn/ResetBtn\";\r\nimport {ActionBtn} from \"./ActionBtn\";\r\n\r\n//types:\r\ntype CounterPropsType = {\r\n    addValue: () => void\r\n    resetValue: () => void\r\n    count: number\r\n    maxValue: number\r\n    startValue: number\r\n    editMode: boolean\r\n}\r\n\r\n//functional component:\r\nconst Counter: React.FC<CounterPropsType> = (props) => {\r\n\r\n    const addValue = () => {\r\n        props.addValue();\r\n    }\r\n\r\n    const resetValue = () => {\r\n        props.resetValue();\r\n    }\r\n\r\n    return (\r\n        <div className={style.CounterBody}>\r\n            <div className={style.Display}>\r\n                <Display\r\n                    maxValue={props.maxValue}\r\n                    count={props.count}\r\n                    editMode={props.editMode}\r\n                />\r\n            </div>\r\n            <div className={style.BtnArea}>\r\n               {/* <IncBtn\r\n                    addValue={props.addValue}\r\n\r\n                    count={props.count}\r\n                    maxValue={props.maxValue}\r\n                    editMode={props.editMode}\r\n                />\r\n                <ResetBtn\r\n                    resetValue={props.resetValue}\r\n\r\n                    count={props.count}\r\n                    startValue={props.startValue}\r\n                    editMode={props.editMode}\r\n                />*/}\r\n                <ActionBtn\r\n                    actionFn={addValue}\r\n                    count={props.count}\r\n                    value={props.maxValue}\r\n                    editMode={props.editMode}\r\n                />\r\n                <ActionBtn\r\n                    actionFn={resetValue}\r\n                    count={props.count}\r\n                    value={props.startValue}\r\n                    editMode={props.editMode}\r\n                />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport {\r\n    Counter\r\n}","import React from \"react\";\r\nimport styles from \"./SetBtn.module.css\"\r\n\r\n//types:\r\ntype SetBtnPropsType = {\r\n    addStartValue: (value: number) => void\r\n    addMaxValue: (value: number) => void\r\n    startValue: number\r\n    maxValue: number\r\n    changeEditMode: (value: boolean) => void\r\n    error: boolean\r\n}\r\n\r\n//functional component:\r\nconst SetBtn: React.FC<SetBtnPropsType> = (props) => {\r\n\r\n    const onclickHandler = () => {\r\n        props.addStartValue(props.startValue);\r\n        props.changeEditMode(false);\r\n\r\n    }\r\n\r\n    const styleBtnValue = props.error ? styles.disable : styles.SetBtn\r\n\r\n    return (\r\n        <div>\r\n            <button\r\n                className={styleBtnValue}\r\n                disabled={props.error}\r\n                onClick={onclickHandler}\r\n            >Set</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport {\r\n    SetBtn\r\n}","import React, {ChangeEvent, useEffect, useState} from \"react\";\r\nimport style from \"./Settings.module.css\"\r\nimport {SetBtn} from \"./SetBtn/SetBtn\";\r\n\r\n//types:\r\ntype SettingsPropsType = {\r\n    addStartValue: (value: number) => void\r\n    addMaxValue: (value: number) => void\r\n    startValue: number\r\n    maxValue: number\r\n    changeEditMode: (value: boolean) => void\r\n    error: boolean\r\n}\r\n\r\n//functional component:\r\nconst Settings: React.FC<SettingsPropsType> = (props) => {\r\n\r\n    //callBacks:\r\n    const startValueHandler = (e: ChangeEvent<HTMLInputElement>)=>{\r\n        props.addStartValue(parseInt(e.currentTarget.value));\r\n        props.changeEditMode(true);\r\n    }\r\n\r\n    const maxValueHandler = (e: ChangeEvent<HTMLInputElement>)=>{\r\n        props.addMaxValue(parseInt(e.currentTarget.value));\r\n        props.changeEditMode(true);\r\n    }\r\n\r\n    const inputClass = props.error ?  `${style.SetInput} ${style.error}` : `${style.SetInput}`\r\n\r\n    return (\r\n        <div className={style.SettingsBody}>\r\n            <div className={style.displayArea}>\r\n                <div className={style.descriptionArea}>\r\n                    <div>max value:</div>\r\n                    <div>start value:</div>\r\n                </div>\r\n                <div className={style.SettingsArea}>\r\n                    <input\r\n                        type={'number'}\r\n                        className={inputClass}\r\n                        value={props.maxValue}\r\n                        onChange={maxValueHandler}\r\n                    />\r\n                    <input\r\n                        type={'number'}\r\n                        className={inputClass}\r\n                        value={props.startValue}\r\n                        onChange={startValueHandler}\r\n                    />\r\n                </div>\r\n            </div>\r\n            <div className={style.SBtnArea}>\r\n                <SetBtn\r\n                    addStartValue={props.addStartValue}\r\n                    addMaxValue={props.addMaxValue}\r\n                    startValue={props.startValue}\r\n                    maxValue={props.maxValue}\r\n                    changeEditMode={props.changeEditMode}\r\n                    error={props.error}\r\n                />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport {\r\n    Settings\r\n}","import React, {useState} from 'react';\nimport style from './App.module.css';\nimport {Counter} from \"./components/Counter/Counter\";\nimport {Settings} from \"./components/Settings/Settings\";\n\n//functional component:\nconst App: React.FC = () => {\n\n    //settings:\n    const [maxValue, setMaxValue] = useState<number>(1);\n    const [startValue, setStartValue] = useState<number>(0);\n\n    //display:\n    const [count, setCount] = useState<number>(0);\n\n    //editMode:\n    const [editMode, setEditMode] = useState<boolean>(false);\n\n    //error:\n    const [error, setError] = useState<boolean>(false);\n\n\n    //callBacks:\n    const addValue = () => {\n        setCount(count + 1);\n    }\n    const resetValue = () => {\n        setCount(startValue);\n    }\n    const addMaxValue = (value: number) => {\n        if (value <= startValue || value < 0) {\n            setError(true);\n        } else {\n            setError(false);\n        }\n        setMaxValue(value);\n\n    }\n    const addStartValue = (value: number) => {\n        if (value >= maxValue || value < 0) {\n            setError(true)\n        } else {\n            setError(false);\n        }\n        setStartValue(value);\n        setCount(startValue);\n    }\n    const changeEditMode = (value: boolean) => {\n        setEditMode(value);\n    }\n\n\n    return (\n        <div className={style.app}>\n            <Settings\n                addStartValue={addStartValue}\n                addMaxValue={addMaxValue}\n                startValue={startValue}\n                maxValue={maxValue}\n                changeEditMode={changeEditMode}\n                error={error}\n            />\n\n            <Counter\n                count={count}\n                addValue={addValue}\n                resetValue={resetValue}\n                maxValue={maxValue}\n                startValue={startValue}\n                editMode={editMode}\n            />\n        </div>\n    );\n}\n\nexport {\n    App\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {App} from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}