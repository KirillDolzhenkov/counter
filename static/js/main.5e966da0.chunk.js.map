{"version":3,"sources":["components/Counter/IncBtn/IncBtn.module.css","components/Counter/ResetBtn/Reset.module.css","components/Settings/SetBtn/SetBtn.module.css","components/Counter/Display/Display.tsx","components/Counter/IncBtn/IncBtn.tsx","components/Counter/ResetBtn/ResetBtn.tsx","components/Counter/Counter.tsx","components/Settings/SetBtn/SetBtn.tsx","components/Settings/Settings.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["module","exports","Display","props","classNamePropsValue","count","maxValue","inputValue","editMode","classNameValue","value","className","IncBtn","styleBtnValue","styles","disable","disabled","onClick","addValue","ResetBtn","startValue","resetValue","Counter","SetBtn","error","addStartValue","addLocalStorageValues","changeEditMode","Settings","useState","localMaxValue","setLocalMaxValue","localStartValue","setLocalStartValue","useEffect","setStorageValues","localStorage","setItem","JSON","stringify","inputClass","type","onChange","e","addMaxValue","parseInt","currentTarget","App","setMaxValue","setStartValue","setCount","setEditMode","setError","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uFACAA,EAAOC,QAAU,CAAC,OAAS,uBAAuB,QAAU,0B,gBCA5DD,EAAOC,QAAU,CAAC,SAAW,wBAAwB,QAAU,yB,gBCA/DD,EAAOC,QAAU,CAAC,OAAS,uBAAuB,QAAU,0B,kNCQ/CC,EAAsC,SAACC,GAEhD,IAAMC,EAAsBD,EAAME,QAAUF,EAAMG,SAAtB,qBAAwD,YAC9EC,EAAaJ,EAAMK,SAAN,6CAA+DL,EAAME,MAClFI,EAAiBN,EAAMK,SAAN,wBAA0CJ,EAEjE,OACI,8BACI,6BACI,uBACIM,MAAOH,EACPI,UAAWF,S,gBCTlBG,EAAoC,SAACT,GAC9C,IAEMU,EAAgBV,EAAME,QAAUF,EAAMG,UAAYH,EAAMK,SAAWM,IAAOC,QAAUD,IAAOF,OACjG,OACI,mCACI,+BACI,wBACID,UAAWE,EACXG,SAAUb,EAAME,QAAUF,EAAMG,UAAYH,EAAMK,SAClDS,QATO,WAAMd,EAAMe,YAMvB,sB,gBCRHC,EAAwC,SAAChB,GAClD,IACMU,EAAgBV,EAAME,QAAUF,EAAMiB,YAAcjB,EAAMK,SAAUM,IAAOC,QAAUD,IAAOK,SAClG,OACI,mCACI,+BACI,wBACIR,UAAWE,EACXG,SAAUb,EAAME,QAAUF,EAAMiB,YAAcjB,EAAMK,SACpDS,QARO,WAAKd,EAAMkB,cAKtB,wBCDHC,EAAsC,SAACnB,GAChD,OACI,sBAAKQ,UAAW,cAAhB,UACI,qBAAKA,UAAW,UAAhB,SACI,cAAC,EAAD,CACIL,SAAUH,EAAMG,SAChBD,MAAOF,EAAME,MACbG,SAAUL,EAAMK,aAGxB,sBAAKG,UAAW,UAAhB,UACI,cAAC,EAAD,CACIO,SAAUf,EAAMe,SAChBb,MAAOF,EAAME,MACbC,SAAUH,EAAMG,SAChBE,SAAUL,EAAMK,WAEpB,cAAC,EAAD,CACIa,WAAYlB,EAAMkB,WAClBhB,MAAOF,EAAME,MACbe,WAAYjB,EAAMiB,WAClBZ,SAAUL,EAAMK,kB,wBCvBvBe,EAAoC,SAACpB,GAC9C,IAMMU,EAAgBV,EAAMqB,MAAQV,IAAOC,QAAUD,IAAOS,OAC5D,OACI,8BACI,wBACIZ,UAAWE,EACXG,SAAUb,EAAMqB,MAChBP,QAZW,WACnBd,EAAMsB,cAActB,EAAMiB,YAC1BjB,EAAMuB,sBAAsBvB,EAAMiB,WAAYjB,EAAMG,UACpDH,EAAMwB,gBAAe,IAMjB,oBCVCC,EAAwC,SAACzB,GAAU,MAGlB0B,mBAAiB1B,EAAMG,UAHL,mBAGrDwB,EAHqD,KAGtCC,EAHsC,OAIdF,mBAAiB1B,EAAMiB,YAJT,mBAIrDY,EAJqD,KAIpCC,EAJoC,KAuB5DC,qBAAU,WACNC,MACF,CAACH,IAEH,IAAMG,EAAmB,WACrBC,aAAaC,QAAQ,kBAAmBC,KAAKC,UAAUT,IACvDM,aAAaC,QAAQ,oBAAqBC,KAAKC,UAAUP,KAIzDQ,EAAarC,EAAMqB,MAAN,iBAAkC,WAInD,OACI,sBAAKb,UAAW,eAAhB,UACI,sBAAKA,UAAW,eAAhB,UACI,+BACI,+CACA,uBACI8B,KAAM,SACN9B,UAAW6B,EACX9B,MAAOP,EAAMG,SACboC,SAlCI,SAACC,GACrBxC,EAAMyC,YAAYC,SAASF,EAAEG,cAAcpC,QAC3CP,EAAMwB,gBAAe,SAmCb,+BACI,iDACA,+BAAM,uBACFc,KAAM,SACN9B,UAAW6B,EACX9B,MAAOP,EAAMiB,WACbsB,SAhDM,SAACC,GACvBxC,EAAMsB,cAAcoB,SAASF,EAAEG,cAAcpC,QAC7CP,EAAMwB,gBAAe,cAkDjB,qBAAKhB,UAAW,WAAhB,SACI,cAAC,EAAD,CACIc,cAAetB,EAAMsB,cACrBmB,YAAazC,EAAMyC,YACnBxB,WAAYjB,EAAMiB,WAClBd,SAAUH,EAAMG,SAChBqB,eAAgBxB,EAAMwB,eACtBD,sBAjDc,SAACN,EAAoBd,GAC/C2B,EAAmBb,GACnBW,EAAiBzB,IAgDLkB,MAAOrB,EAAMqB,cCHlBuB,MAvEf,WAAe,MAGqBlB,mBAAiB,GAHtC,mBAGJvB,EAHI,KAGM0C,EAHN,OAIyBnB,mBAAiB,GAJ1C,mBAIJT,EAJI,KAIQ6B,EAJR,OAOepB,mBAAiB,GAPhC,mBAOJxB,EAPI,KAOG6C,EAPH,OAUqBrB,oBAAkB,GAVvC,mBAUJrB,EAVI,KAUM2C,EAVN,OAaetB,oBAAkB,GAbjC,mBAaJL,EAbI,KAaG4B,EAbH,KAgDX,OACI,sBAAKzC,UAAU,MAAf,UACI,cAAC,EAAD,CACIc,cAlBU,SAACf,GAEf0C,EADD1C,GAASJ,GAAYI,EAAQ,GAKhCuC,EAAcvC,GACdwC,EAAS9B,IAYDwB,YA5BQ,SAAClC,GAEb0C,EADD1C,GAASU,GAAcV,EAAQ,GAKlCsC,EAAYtC,IAuBJU,WAAYA,EACZd,SAAUA,EACVqB,eAbW,SAACjB,GACpByC,EAAYzC,IAaJc,MAAOA,IAGX,cAAC,EAAD,CACInB,MAAOA,EACPa,SA3CK,WACbgC,EAAS7C,EAAQ,IA2CTgB,WAzCO,WACf6B,EAAS9B,IAyCDd,SAAUA,EACVc,WAAYA,EACZZ,SAAUA,QCzDX6C,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.5e966da0.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"IncBtn\":\"IncBtn_IncBtn__35U13\",\"disable\":\"IncBtn_disable__MkiID\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ResetBtn\":\"Reset_ResetBtn__3MHlv\",\"disable\":\"Reset_disable__jrFMj\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"SetBtn\":\"SetBtn_SetBtn__cabLy\",\"disable\":\"SetBtn_disable__1QykG\"};","import React from \"react\";\r\nimport './Display.css'\r\n\r\ntype DisplayPropsType = {\r\n    count: number\r\n    maxValue: number\r\n    editMode: boolean\r\n}\r\n\r\nexport const Display: React.FC<DisplayPropsType> = (props) => {\r\n\r\n    const classNamePropsValue = props.count === props.maxValue ? `baseValue redValue` : 'baseValue';\r\n    const inputValue = props.editMode? `please enter values and press \"Set\" button` : props.count;\r\n    const classNameValue = props.editMode? `baseValue information` : classNamePropsValue;\r\n\r\n    return(\r\n        <div>\r\n            <h2>\r\n                <input\r\n                    value={inputValue}\r\n                    className={classNameValue}\r\n                />\r\n            </h2>\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport styles from './IncBtn.module.css';\r\n/*import styles from \"../ResetBtn/Reset.module.css\";*/\r\n\r\ntype IncBtnPropsType = {\r\n    addValue: () => void\r\n    count: number\r\n    maxValue: number\r\n    editMode: boolean\r\n}\r\n\r\nexport const IncBtn: React.FC<IncBtnPropsType> = (props) => {\r\n    const onClickHandler = () =>{props.addValue()}\r\n    /*const styleBtnValue = props.onDisplay === 0 ? 'IncBtn' : 'DisabledIncBtnBtn'*/\r\n    const styleBtnValue = props.count === props.maxValue || props.editMode ? styles.disable : styles.IncBtn\r\n    return (\r\n        <>\r\n            <span>\r\n                <button\r\n                    className={styleBtnValue}\r\n                    disabled={props.count === props.maxValue || props.editMode}\r\n                    onClick={onClickHandler}\r\n                >Inc</button>\r\n            </span>\r\n        </>\r\n    )\r\n}","import React from \"react\";\r\nimport styles from './Reset.module.css';\r\n\r\ntype ResetBtnPropsType = {\r\n    resetValue: () => void\r\n    count: number\r\n    startValue: number\r\n    editMode: boolean\r\n}\r\n\r\nexport const ResetBtn: React.FC<ResetBtnPropsType> = (props) => {\r\n    const onClickHandler = ()=>{props.resetValue()}\r\n    const styleBtnValue = props.count === props.startValue || props.editMode? styles.disable : styles.ResetBtn\r\n    return (\r\n        <>\r\n            <span>\r\n                <button\r\n                    className={styleBtnValue}\r\n                    disabled={props.count === props.startValue || props.editMode}\r\n                    onClick={onClickHandler}\r\n                >Reset</button>\r\n            </span>\r\n        </>\r\n    )\r\n}","import React from \"react\";\r\nimport './Counter.css'\r\nimport {Display} from \"./Display/Display\";\r\nimport {IncBtn} from \"./IncBtn/IncBtn\";\r\nimport {ResetBtn} from \"./ResetBtn/ResetBtn\";\r\n\r\ntype CounterPropsType = {\r\n    addValue: () => void\r\n    resetValue: () => void\r\n    count: number\r\n    maxValue: number\r\n    startValue: number\r\n    editMode: boolean\r\n}\r\n\r\nexport const Counter: React.FC<CounterPropsType> = (props) => {\r\n    return (\r\n        <div className={'CounterBody'}>\r\n            <div className={'Display'}>\r\n                <Display\r\n                    maxValue={props.maxValue}\r\n                    count={props.count}\r\n                    editMode={props.editMode}\r\n                />\r\n            </div>\r\n            <div className={'BtnArea'}>\r\n                <IncBtn\r\n                    addValue={props.addValue}\r\n                    count={props.count}\r\n                    maxValue={props.maxValue}\r\n                    editMode={props.editMode}\r\n                />\r\n                <ResetBtn\r\n                    resetValue={props.resetValue}\r\n                    count={props.count}\r\n                    startValue={props.startValue}\r\n                    editMode={props.editMode}\r\n                />\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport styles from \"./SetBtn.module.css\"\r\n\r\ntype SetBtnPropsType = {\r\n    addStartValue: (value: number) => void\r\n    addMaxValue: (value: number) => void\r\n    startValue: number\r\n    maxValue: number\r\n    changeEditMode: (value: boolean) => void\r\n    addLocalStorageValues: (startValue: number, maxValue: number) => void\r\n    error: boolean\r\n}\r\n\r\nexport const SetBtn: React.FC<SetBtnPropsType> = (props) => {\r\n    const onclickHandler = () => {\r\n        props.addStartValue(props.startValue);\r\n        props.addLocalStorageValues(props.startValue, props.maxValue); // <-- addLocalStorageValues\r\n        props.changeEditMode(false);\r\n\r\n    }\r\n    const styleBtnValue = props.error ? styles.disable : styles.SetBtn\r\n    return (\r\n        <div>\r\n            <button\r\n                className={styleBtnValue}\r\n                disabled={props.error}\r\n                onClick={onclickHandler}\r\n            >Set\r\n            </button>\r\n        </div>\r\n    )\r\n}","import React, {ChangeEvent, useEffect, useState} from \"react\";\r\nimport \"./Settings.css\"\r\nimport {SetBtn} from \"./SetBtn/SetBtn\";\r\n\r\ntype SettingsPropsType = {\r\n    addStartValue: (value: number) => void\r\n    addMaxValue: (value: number) => void\r\n    startValue: number\r\n    maxValue: number\r\n    changeEditMode: (value: boolean) => void\r\n    error: boolean\r\n}\r\n\r\nexport const Settings: React.FC<SettingsPropsType> = (props) => {\r\n\r\n    //localSettings:\r\n    const [localMaxValue, setLocalMaxValue] = useState<number>(props.maxValue);\r\n    const [localStartValue, setLocalStartValue] = useState<number>(props.startValue);\r\n\r\n    //callBacks:\r\n    const startValueHandler = (e: ChangeEvent<HTMLInputElement>)=>{\r\n        props.addStartValue(parseInt(e.currentTarget.value));\r\n        props.changeEditMode(true);\r\n    }\r\n\r\n    const maxValueHandler = (e: ChangeEvent<HTMLInputElement>)=>{\r\n        props.addMaxValue(parseInt(e.currentTarget.value));\r\n        props.changeEditMode(true);\r\n    }\r\n\r\n    const addLocalStorageValues = (startValue: number, maxValue: number) => {\r\n        setLocalStartValue(startValue);\r\n        setLocalMaxValue(maxValue);\r\n    }\r\n\r\n    //localStorage:\r\n    useEffect(() => {\r\n        setStorageValues();\r\n    },[localStartValue]);\r\n\r\n    const setStorageValues = () => {\r\n        localStorage.setItem(\"counterMaxValue\", JSON.stringify(localMaxValue));\r\n        localStorage.setItem(\"counterStartValue\", JSON.stringify(localStartValue));\r\n    }\r\n\r\n    /*let inputClass = props.error ? 'errorInput' : 'SetInput';*/\r\n    let inputClass = props.error ?  `SetInput error` : 'SetInput';\r\n\r\n\r\n\r\n    return (\r\n        <div className={\"SettingsBody\"}>\r\n            <div className={'SettingsArea'}>\r\n                <h2>\r\n                    <span>max value: </span>\r\n                    <input\r\n                        type={\"number\"}\r\n                        className={inputClass}\r\n                        value={props.maxValue}\r\n                        onChange={maxValueHandler}\r\n                    />\r\n                </h2>\r\n                <h2>\r\n                    <span>start value: </span>\r\n                    <span><input\r\n                        type={\"number\"}\r\n                        className={inputClass}\r\n                        value={props.startValue}\r\n                        onChange={startValueHandler}\r\n                    /></span>\r\n                </h2>\r\n            </div>\r\n            <div className={\"SBtnArea\"}>\r\n                <SetBtn\r\n                    addStartValue={props.addStartValue}\r\n                    addMaxValue={props.addMaxValue}\r\n                    startValue={props.startValue}\r\n                    maxValue={props.maxValue}\r\n                    changeEditMode={props.changeEditMode}\r\n                    addLocalStorageValues={addLocalStorageValues}\r\n                    error={props.error}\r\n                />\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React, {useState} from 'react';\nimport './App.css';\nimport {Counter} from \"./components/Counter/Counter\";\nimport {Settings} from \"./components/Settings/Settings\";\n\n\nfunction App() {\n\n    //settings:\n    const [maxValue, setMaxValue] = useState<number>(1);\n    const [startValue, setStartValue] = useState<number>(0);\n\n    //display:\n    const [count, setCount] = useState<number>(0);\n\n    //editMode:\n    const [editMode, setEditMode] = useState<boolean>(false);\n\n    //error:\n    const [error, setError] = useState<boolean>(false);\n\n\n\n    //callBacks:\n    const addValue = () => {\n        setCount(count + 1);\n    }\n    const resetValue = () => {\n        setCount(startValue);\n    }\n    const addMaxValue = (value: number) => {\n        if(value <= startValue || value < 0){\n            setError(true);\n        } else {\n            setError(false);\n        }\n        setMaxValue(value);\n\n    }\n    const addStartValue = (value: number) => {\n        if(value >= maxValue || value < 0){\n            setError(true)\n        } else {\n            setError(false);\n        }\n        setStartValue(value);\n        setCount(startValue);\n    }\n    const changeEditMode = (value: boolean) => {\n        setEditMode(value);\n    }\n\n\n\n    return (\n        <div className=\"App\">\n            <Settings\n                addStartValue={addStartValue}\n                addMaxValue={addMaxValue}\n                startValue={startValue}\n                maxValue={maxValue}\n                changeEditMode={changeEditMode}\n                error={error}\n            />\n\n            <Counter\n                count={count}\n                addValue={addValue}\n                resetValue={resetValue}\n                maxValue={maxValue}\n                startValue={startValue}\n                editMode={editMode}\n            />\n        </div>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}