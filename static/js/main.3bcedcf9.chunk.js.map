{"version":3,"sources":["components/Counter/Counter.module.css","components/Counter/Display/Display.module.css","components/Counter/ActionBtn/ActionBtn.module.css","App.module.css","components/Counter/Display/Display.tsx","components/Counter/ActionBtn/ActionBtn.tsx","components/Counter/Counter.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["module","exports","Display","props","countValue","inputClassName","maxCountValue","styles","regularValue","maxValue","type","className","value","ActionBtn","btnName","actionFn","btnClassName","disableActionBtn","enableActionBtn","onClick","disabled","Counter","addValue","resetValue","style","CounterBody","BtnArea","App","useState","setCountValue","app","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qFACAA,EAAOC,QAAU,CAAC,YAAc,6BAA6B,QAAU,2B,gBCAvED,EAAOC,QAAU,CAAC,aAAe,8BAA8B,SAAW,0BAA0B,YAAc,+B,iBCAlHD,EAAOC,QAAU,CAAC,gBAAkB,mCAAmC,iBAAmB,sC,iBCA1FD,EAAOC,QAAU,CAAC,IAAM,mB,sKCalBC,EAAsC,SAACC,GAAW,IAEhDC,EAEAD,EAFAC,WAIEC,EAAiBD,IAFnBD,EADAG,cAGmB,UACdC,IAAOC,aADO,eAEdD,IAAOC,aAFO,YAESD,IAAOE,UAEvC,OACI,mCACI,uBACIC,KAAK,OACLC,UAAWN,EACXO,MAAOR,O,gBCTjBS,EAA0C,SAACV,GAAW,IAEpDW,EAIAX,EAJAW,QACAV,EAGAD,EAHAC,WACAW,EAEAZ,EAFAY,SACAT,EACAH,EADAG,cAMEU,EAAeZ,IAAeE,EAC9BC,IAAOU,iBACPV,IAAOW,gBAEb,OACI,mCACI,wBACIP,UAAWK,EACXG,QAXW,WACnBJ,KAWQK,SAAUhB,IAAeE,EAH7B,SAIEQ,OCnBRO,EAAsC,SAAClB,GAAW,IAEhDC,EAGAD,EAHAC,WACAkB,EAEAnB,EAFAmB,SACAC,EACApB,EADAoB,WAIJ,OACI,sBAAKZ,UAAWa,IAAMC,YAAtB,UACI,qBAAKd,UAAWa,IAAMtB,QAAtB,SACI,cAAC,EAAD,CACIE,WAAYA,EACZE,cAAe,MAGvB,sBAAKK,UAAWa,IAAME,QAAtB,UACG,cAAC,EAAD,CACIZ,QAAS,MACTV,WAAYA,EACZW,SAAUO,EACVhB,cAAe,IAEnB,cAAC,EAAD,CACIQ,QAAS,QACTV,WAAYA,EACZW,SAAUQ,EACVjB,cAAe,WCzC5BqB,EAAgB,WAAO,IAAD,EACYC,mBAAS,GADrB,mBACjBxB,EADiB,KACLyB,EADK,KAUxB,OACI,qBAAKlB,UAAWa,IAAMM,IAAtB,SACI,cAAC,EAAD,CACI1B,WAAYA,EACZkB,SAXK,WACbO,EAAczB,EAAa,IAWnBmB,WATO,WACfM,EAAc,SCDPE,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.3bcedcf9.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"CounterBody\":\"Counter_CounterBody__2Ok5h\",\"BtnArea\":\"Counter_BtnArea__3Tg7J\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"regularValue\":\"Display_regularValue__1g4h5\",\"maxValue\":\"Display_maxValue__1lNoi\",\"information\":\"Display_information__eDdm6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"enableActionBtn\":\"ActionBtn_enableActionBtn__3cju0\",\"disableActionBtn\":\"ActionBtn_disableActionBtn__3By3D\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"App_app__3QxsX\"};","import React from \"react\";\r\n\r\nimport styles from './Display.module.css'\r\n\r\n//types:\r\ntype DisplayPropsType = {\r\n    /*    count: number\r\n        maxValue: number\r\n        editMode: boolean*/\r\n    countValue: number\r\n    maxCountValue: number\r\n}\r\n\r\n//functional component:\r\nconst Display: React.FC<DisplayPropsType> = (props) => {\r\n    const {\r\n        countValue,\r\n        maxCountValue,\r\n    } = props;\r\n\r\n    const inputClassName = countValue !== maxCountValue\r\n        ? `${styles.regularValue} `\r\n        : `${styles.regularValue} ${styles.maxValue}`;\r\n\r\n    return (\r\n        <>\r\n            <input\r\n                type=\"text\"\r\n                className={inputClassName}\r\n                value={countValue}\r\n            />\r\n        </>\r\n    );\r\n}\r\n/*  const classNamePropsValue = props.count === props.maxValue ? `${style.baseValue} ${style.redValue}` : `${style.baseValue}`;\r\n  const inputValue = props.editMode ? `please enter the values and press \"Set\" btn` : props.count;\r\n  const classNameValue = props.editMode ? `${style.baseValue} ${style.information}` : classNamePropsValue;\r\n\r\n  return (\r\n      <div>\r\n          <input\r\n              value={inputValue}\r\n              className={classNameValue}\r\n          />\r\n      </div>\r\n  )\r\n}*/\r\n\r\nexport {\r\n    Display\r\n}","import React from \"react\";\r\n\r\nimport styles from \"./ActionBtn.module.css\";\r\n\r\n//types:\r\ntype ActionBtnPropsType = {\r\n    /*actionFn: () => void\r\n    count: number\r\n    value: number\r\n    editMode: boolean\r\n    title: string*/\r\n\r\n    btnName: string\r\n    countValue: number\r\n    actionFn: () => void\r\n    maxCountValue: number\r\n}\r\n\r\n\r\n//functional component:\r\nconst ActionBtn: React.FC<ActionBtnPropsType> = (props) => {\r\n    const {\r\n        btnName,\r\n        countValue,\r\n        actionFn,\r\n        maxCountValue,\r\n    } = props;\r\n\r\n    const onClickHandler = () => {\r\n        actionFn();\r\n    }\r\n    const btnClassName = countValue === maxCountValue\r\n        ? styles.disableActionBtn\r\n        : styles.enableActionBtn\r\n\r\n    return (\r\n        <>\r\n            <button\r\n                className={btnClassName}\r\n                onClick={onClickHandler}\r\n                disabled={countValue === maxCountValue}\r\n            >{btnName}</button>\r\n        </>\r\n\r\n    )\r\n\r\n}\r\n\r\nexport {\r\n    ActionBtn\r\n}\r\n/*\r\n\r\nconst onClickHandler = () => {\r\n    props.actionFn();\r\n}\r\n\r\nconst styleBtnValue = props.count === props.value || props.editMode\r\n    ? style.disableActionBtn\r\n    : style.enableActionBtn\r\n\r\nreturn (\r\n    <div>\r\n        <button\r\n            className={styleBtnValue}\r\n            disabled={props.count === props.value || props.editMode}\r\n            onClick={onClickHandler}\r\n        >{props.title}\r\n        </button>\r\n    </div>\r\n)*/\r\n","import React from \"react\";\r\n\r\nimport style from './Counter.module.css'\r\nimport {Display} from \"./Display/Display\";\r\nimport {ActionBtn} from \"./ActionBtn/ActionBtn\";\r\n\r\n//types:\r\ntype CounterPropsType = {\r\n   /* addValue: () => void\r\n    resetValue: () => void\r\n    count: number\r\n    maxValue: number\r\n    startValue: number\r\n    editMode: boolean*/\r\n\r\n    countValue: number\r\n    addValue: () => void\r\n    resetValue: () => void\r\n\r\n}\r\n\r\n//functional component:\r\nconst Counter: React.FC<CounterPropsType> = (props) => {\r\n    const {\r\n        countValue,\r\n        addValue,\r\n        resetValue,\r\n    } = props;\r\n\r\n\r\n    return (\r\n        <div className={style.CounterBody}>\r\n            <div className={style.Display}>\r\n                <Display\r\n                    countValue={countValue}\r\n                    maxCountValue={5}\r\n                />\r\n            </div>\r\n            <div className={style.BtnArea}>\r\n               <ActionBtn\r\n                   btnName={\"Inc\"}\r\n                   countValue={countValue}\r\n                   actionFn={addValue}\r\n                   maxCountValue={5}\r\n               />\r\n               <ActionBtn\r\n                   btnName={\"Reset\"}\r\n                   countValue={countValue}\r\n                   actionFn={resetValue}\r\n                   maxCountValue={0}\r\n               />\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport {\r\n    Counter\r\n}\r\n\r\n\r\n    /*const addValue = () => {\r\n        props.addValue();\r\n    }\r\n\r\n    const resetValue = () => {\r\n        props.resetValue();\r\n    }\r\n\r\n    return (\r\n        <div className={style.CounterBody}>\r\n            <div className={style.Display}>\r\n\r\n                <Display\r\n                    maxValue={props.maxValue}\r\n                    count={props.count}\r\n                    editMode={props.editMode}\r\n                />\r\n\r\n            </div>\r\n            <div className={style.BtnArea}>\r\n\r\n                <ActionBtn\r\n                    title={\"Inc\"}\r\n                    actionFn={addValue}\r\n                    count={props.count}\r\n                    value={props.maxValue}\r\n                    editMode={props.editMode}\r\n                />\r\n\r\n                <ActionBtn\r\n                    title={\"Reset\"}\r\n                    actionFn={resetValue}\r\n                    count={props.count}\r\n                    value={props.startValue}\r\n                    editMode={props.editMode}\r\n                />\r\n\r\n            </div>\r\n        </div>\r\n    )\r\n}*/\r\n\r\n","import React, {useReducer, useState} from 'react';\nimport style from './App.module.css';\nimport {Counter} from \"./components/Counter/Counter\";\nimport {Settings} from \"./components/Settings/Settings\";\nimport {addValueAC} from \"./redux/appReducer\";\n\n\n//functional component:\nconst App: React.FC = () => {\n    const [countValue, setCountValue] = useState(0);\n\n    const addValue = () => {\n        setCountValue(countValue + 1);\n    }\n    const resetValue = () => {\n        setCountValue(0);\n    }\n\n    return (\n        <div className={style.app}>\n            <Counter\n                countValue={countValue}\n                addValue={addValue}\n                resetValue={resetValue}\n            />\n        </div>\n    )\n\n}\n/*\n    //settings:\n    const [maxValue, setMaxValue] = useState<number>(1);\n    const [startValue, setStartValue] = useState<number>(0);\n\n    //display:\n    const [count, setCount] = useState<number>(0);\n\n    //editMode:\n    const [editMode, setEditMode] = useState<boolean>(false);\n\n    //error:\n    const [error, setError] = useState<boolean>(false);\n\n\n    //callBacks:\n    const addValue = () => {\n        /!*setCount(count + 1);*!/\n        addValueAC()\n    }\n\n    const resetValue = () => {\n        setCount(startValue);\n    }\n\n    const addMaxValue = (value: number) => {\n        if (value <= startValue || value < 0) {\n            setError(true);\n        } else {\n            setError(false);\n        }\n        setMaxValue(value);\n    }\n\n    const addStartValue = (value: number) => {\n        if (value >= maxValue || value < 0) {\n            setError(true)\n        } else {\n            setError(false);\n        }\n        setStartValue(value);\n        setCount(startValue);\n    }\n\n    const changeEditMode = (value: boolean) => {\n        setEditMode(value);\n    }\n\n\n    return (\n        <div className={style.app}>\n            <Settings\n                addStartValue={addStartValue}\n                addMaxValue={addMaxValue}\n                startValue={startValue}\n                maxValue={maxValue}\n                changeEditMode={changeEditMode}\n                error={error}\n            />\n\n            <Counter\n                count={count}\n                addValue={addValue}\n                resetValue={resetValue}\n                maxValue={maxValue}\n                startValue={startValue}\n                editMode={editMode}\n            />\n        </div>\n    );\n}*/\n\nexport {\n    App\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {App} from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}