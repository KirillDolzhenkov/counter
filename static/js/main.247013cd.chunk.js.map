{"version":3,"sources":["components/Display/Display.tsx","components/IncBtn/IncBtn.tsx","components/ResetBtn/ResetBtn.tsx","components/Counter/Counter.tsx","components/Settings/SetBtn/SetBtn.tsx","components/Settings/Settings.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Display","props","classNameValue","count","maxValue","value","className","IncBtn","disabled","onClick","addValue","ResetBtn","resetValue","Counter","SetBtn","addStartValue","startValue","Settings","type","onChange","e","addMaxValue","parseInt","currentTarget","App","useState","setMaxValue","setStartValue","setCount","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8UAQaA,EAAsC,SAACC,GAChD,IAAMC,EAAiBD,EAAME,QAAUF,EAAMG,SAAW,WAAa,YACrE,OACI,8BACI,6BACI,uBACIC,MAAOJ,EAAME,MACbG,UAAWJ,SCNlBK,G,MAAoC,SAACN,GAG9C,OACI,mCACI,+BACI,wBACIK,UAAW,SACXE,SAAUP,EAAME,QAAUF,EAAMG,SAChCK,QARO,WAAMR,EAAMS,YAKvB,uBCPHC,G,MAAwC,SAACV,GAGlD,OACI,mCACI,+BACI,wBACIK,UAAW,WACXE,SAA0B,IAAhBP,EAAME,MAChBM,QARO,WAAKR,EAAMW,cAKtB,yBCAHC,EAAsC,SAACZ,GAChD,OACI,sBAAKK,UAAW,cAAhB,UACI,qBAAKA,UAAW,UAAhB,SACI,cAAC,EAAD,CACIF,SAAUH,EAAMG,SAChBD,MAAOF,EAAME,UAGrB,sBAAKG,UAAW,UAAhB,UACI,cAAC,EAAD,CACII,SAAUT,EAAMS,SAChBP,MAAOF,EAAME,MACbC,SAAUH,EAAMG,WAEpB,cAAC,EAAD,CACIQ,WAAYX,EAAMW,WAClBT,MAAOF,EAAME,eCrBpBW,G,YAAoC,SAACb,GAE9C,OACI,8BACI,wBACIK,UAAW,SACXG,QALU,WAAMR,EAAMc,cAAcd,EAAMe,aAG9C,qBCHCC,EAAwC,SAAChB,GAYlD,OACI,sBAAKK,UAAW,eAAhB,UACI,sBAAKA,UAAW,eAAhB,UACI,+BACI,+CACA,uBACIY,KAAM,SACNZ,UAAW,WACXD,MAAOJ,EAAMG,SACbe,SAZI,SAACC,GACrBnB,EAAMoB,YAAYC,SAASF,EAAEG,cAAclB,cAcnC,+BACI,iDACA,+BAAM,uBACFa,KAAM,SACNZ,UAAW,WACXD,MAAOJ,EAAMe,WACbG,SAzBM,SAACC,GACvBnB,EAAMc,cAAcO,SAASF,EAAEG,cAAclB,mBA4BzC,qBAAKC,UAAW,WAAhB,SACI,cAAC,EAAD,CACIS,cAAed,EAAMc,cACrBM,YAAapB,EAAMoB,YACnBL,WAAYf,EAAMe,WAClBZ,SAAUH,EAAMG,iBCQrBoB,MAnDf,WAAe,MAIqBC,mBAAiB,GAJtC,mBAIJrB,EAJI,KAIMsB,EAJN,OAKyBD,mBAAiB,GAL1C,mBAKJT,EALI,KAKQW,EALR,OAQeF,mBAAiB,GARhC,mBAQJtB,EARI,KAQGyB,EARH,KAgCX,OACI,sBAAKtB,UAAU,MAAf,UACI,cAAC,EAAD,CACIS,cATU,SAACV,GACnBsB,EAActB,GACduB,EAASZ,IAQDK,YAdQ,SAAChB,GACjBqB,EAAYrB,IAcJW,WAAYA,EACZZ,SAAUA,IAGd,cAAC,EAAD,CACID,MAAOA,EACPO,SA7BK,WACbkB,EAASzB,EAAQ,IA6BTS,WA1BO,WACfgB,EAASZ,IA0BDZ,SAAUA,QCtCXyB,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.247013cd.chunk.js","sourcesContent":["import React from \"react\";\r\nimport './Display.css'\r\n\r\ntype DisplayPropsType = {\r\n    count: number\r\n    maxValue: number\r\n}\r\n\r\nexport const Display: React.FC<DisplayPropsType> = (props) => {\r\n    const classNameValue = props.count === props.maxValue ? 'redValue' : 'baseValue';\r\n    return(\r\n        <div>\r\n            <h2>\r\n                <input\r\n                    value={props.count}\r\n                    className={classNameValue}\r\n                />\r\n            </h2>\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport './IncBtn.css';\r\n\r\ntype IncBtnPropsType = {\r\n    addValue: () => void\r\n    count: number\r\n    maxValue: number\r\n}\r\n\r\nexport const IncBtn: React.FC<IncBtnPropsType> = (props) => {\r\n    const onClickHandler = () =>{props.addValue()}\r\n    /*const styleBtnValue = props.onDisplay === 0 ? 'IncBtn' : 'DisabledIncBtnBtn'*/\r\n    return (\r\n        <>\r\n            <span>\r\n                <button\r\n                    className={'IncBtn'}\r\n                    disabled={props.count === props.maxValue}\r\n                    onClick={onClickHandler}\r\n                >Inc</button>\r\n            </span>\r\n        </>\r\n    )\r\n}","import React from \"react\";\r\nimport './Reset.css';\r\n\r\ntype ResetBtnPropsType = {\r\n    resetValue: () => void\r\n    count: number\r\n}\r\n\r\nexport const ResetBtn: React.FC<ResetBtnPropsType> = (props) => {\r\n    const onClickHandler = ()=>{props.resetValue()}\r\n    /*const styleBtnValue = props.onDisplay === 0 ? 'ResetBtn' : 'DisabledResetBtn'*/\r\n    return (\r\n        <>\r\n            <span>\r\n                <button\r\n                    className={'ResetBtn'}\r\n                    disabled={props.count === 0}\r\n                    onClick={onClickHandler}\r\n                >Reset</button>\r\n            </span>\r\n        </>\r\n    )\r\n}","import React from \"react\";\r\nimport './Counter.css'\r\nimport {Display} from \"../Display/Display\";\r\nimport {IncBtn} from \"../IncBtn/IncBtn\";\r\nimport {ResetBtn} from \"../ResetBtn/ResetBtn\";\r\n\r\ntype CounterPropsType = {\r\n    addValue: () => void\r\n    resetValue: () => void\r\n    count: number\r\n    maxValue: number\r\n\r\n}\r\n\r\nexport const Counter: React.FC<CounterPropsType> = (props) => {\r\n    return (\r\n        <div className={'CounterBody'}>\r\n            <div className={'Display'}>\r\n                <Display\r\n                    maxValue={props.maxValue}\r\n                    count={props.count}\r\n                />\r\n            </div>\r\n            <div className={'BtnArea'}>\r\n                <IncBtn\r\n                    addValue={props.addValue}\r\n                    count={props.count}\r\n                    maxValue={props.maxValue}\r\n                />\r\n                <ResetBtn\r\n                    resetValue={props.resetValue}\r\n                    count={props.count}\r\n                />\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport \"./SetBtn.css\"\r\n\r\ntype SetBtnPropsType = {\r\n    addStartValue: (value: number) => void\r\n    addMaxValue: (value: number) => void\r\n    startValue: number\r\n    maxValue: number\r\n}\r\n\r\nexport const SetBtn: React.FC<SetBtnPropsType> = (props) => {\r\n    const onclickHandler =()=> {props.addStartValue(props.startValue)}\r\n    return(\r\n        <div>\r\n            <button\r\n                className={\"SetBtn\"}\r\n                onClick={onclickHandler}\r\n            >Set</button>\r\n        </div>\r\n    )\r\n}","import React, {ChangeEvent, useState} from \"react\";\r\nimport \"./Settings.css\"\r\nimport {SetBtn} from \"./SetBtn/SetBtn\";\r\n\r\ntype SettingsPropsType = {\r\n    addStartValue: (value: number) => void\r\n    addMaxValue: (value: number) => void\r\n    startValue: number\r\n    maxValue: number\r\n}\r\n\r\nexport const Settings: React.FC<SettingsPropsType> = (props) => {\r\n\r\n    /*   const [maxInputValue, setMaxInputValue] = useState<number>(0)\r\n   const [startInputValue, setStartInputValue] = useState<number>(0)*/\r\n\r\n    const startValueHandler = (e: ChangeEvent<HTMLInputElement>)=>{\r\n        props.addStartValue(parseInt(e.currentTarget.value))\r\n    }\r\n\r\n    const maxValueHandler = (e: ChangeEvent<HTMLInputElement>)=>{\r\n        props.addMaxValue(parseInt(e.currentTarget.value))\r\n    }\r\n    return (\r\n        <div className={\"SettingsBody\"}>\r\n            <div className={'SettingsArea'}>\r\n                <h2>\r\n                    <span>max value: </span>\r\n                    <input\r\n                        type={\"number\"}\r\n                        className={'SetInput'}\r\n                        value={props.maxValue}\r\n                        onChange={maxValueHandler}\r\n                    />\r\n                </h2>\r\n                <h2>\r\n                    <span>start value: </span>\r\n                    <span><input\r\n                        type={\"number\"}\r\n                        className={'SetInput'}\r\n                        value={props.startValue}\r\n                        onChange={startValueHandler}\r\n                    /></span>\r\n                </h2>\r\n            </div>\r\n            <div className={\"SBtnArea\"}>\r\n                <SetBtn\r\n                    addStartValue={props.addStartValue}\r\n                    addMaxValue={props.addMaxValue}\r\n                    startValue={props.startValue}\r\n                    maxValue={props.maxValue}\r\n\r\n                />\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React, {useState} from 'react';\nimport './App.css';\nimport {Counter} from \"./components/Counter/Counter\";\nimport {Settings} from \"./components/Settings/Settings\";\n\n\n\nfunction App() {\n    /*const [startValue, setStartValue] = useState<number>(0)*/\n\n\n    const [maxValue, setMaxValue] = useState<number>(0)\n    const [startValue, setStartValue] = useState<number>(0)\n\n\n    const [count, setCount] = useState<number>(0)\n\n\n\n\n\n    const addValue = () => {\n        setCount(count + 1);\n    }\n\n    const resetValue = () => {\n        setCount(startValue);\n    }\n\n    const addMaxValue = (value: number) => {\n        setMaxValue(value)\n    }\n\n    const addStartValue = (value: number) => {\n        setStartValue(value)\n        setCount(startValue)\n    }\n\n\n    return (\n        <div className=\"App\">\n            <Settings\n                addStartValue={addStartValue}\n                addMaxValue={addMaxValue}\n                startValue={startValue}\n                maxValue={maxValue}\n            />\n\n            <Counter\n                count={count}\n                addValue={addValue}\n                resetValue={resetValue}\n                maxValue={maxValue}\n            />\n        </div>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}